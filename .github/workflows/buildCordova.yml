# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build

on:
  push:
    branches: [ development, '**-RC' ]

jobs:
  build:
    strategy:
      matrix:
        node-version: [16.x]
        runtime: [ linux-x64 ]
        include:
        - runtime: linux-x64
          os: ubuntu-18.04

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: "yarn"
    - run: npm run ci
    - name: Get Version Number
      uses: nyaayaya/package-version@v1
      with:
        path: 'package.json'
        follow-symlinks: false

    - name: Set Version Number Variable
      id: versionNumber
      uses: actions/github-script@v3
      env:
        IS_DEV: ${{ contains(github.ref, 'development') }}
        IS_RC: ${{ contains(github.ref, 'RC') }}
        VERSION_NUMBER_NIGHTLY: ${{ env.PACKAGE_VERSION }}-nightly-${{ github.run_number }}
        VERSION_NUMBER_RC: ${{ env.PACKAGE_VERSION }}-RC-${{ github.run_number }}
        VERSION_NUMBER: ${{ env.PACKAGE_VERSION }}
      with:
        result-encoding: string
        script: |
          if (${{ env.IS_DEV }}) {
            return "${{ env.VERSION_NUMBER_NIGHTLY }}"
          } else if (${{ env.IS_RC }}) {
            return "${{ env.VERSION_NUMBER_RC }}"
          } else {
           return "${{env.VERSION_NUMBER }}"
          }
        # script: if ${{ env.IS_DEV }} then echo "::set-output name=VERSION_NUMBER::${{ env.VERSION_NUMBER_NIGHTLY }}" else echo "::set-output name=VERSION_NUMBER::${{ env.VERSION_NUMBER }}" fi

    - name: Update package.json version
      uses: jossef/action-set-json-field@v1
      with:
        file: package.json
        field: version
        value: ${{ steps.versionNumber.outputs.result }}


    - name: Install libarchive-tools
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      run: sudo apt -y install libarchive-tools; echo "Version Number ${{ toJson(job) }} ${{ toJson(needs) }}"

    - name: Pack with Node.js ${{ matrix.node-version}}
      if: contains(matrix.runtime, 'x64')
      run: npm run pack

    - name: Setup Android SDK Tools
      if: contains(matrix.runtime, 'x64')
      uses: android-actions/setup-android@v2.0.2

    - name: Build APK with Cordova with Node.js ${{ matrix.node-version}}
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      run: npm run build:cordova freetube-${{ steps.versionNumber.outputs.result }}.apk

    - name: Upload Cordova APK Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube-${{ steps.versionNumber.outputs.result }}.apk
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.apk

    - name: Build HTML5 with Node.js ${{ matrix.node-version}}
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      run: npm run build:cordova freetube browser

    - name: Setup Zip Action
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      uses: montudor/action-zip@v1.0.0

    - name: Zip output
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      run: zip -qq -r freetube-${{ steps.versionNumber.outputs.result }}.zip *
      working-directory: build/freetube/

    - name: Upload Cordova HTML5 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube-${{ steps.versionNumber.outputs.result }}.zip
        path: build/freetube/freetube-${{ steps.versionNumber.outputs.result }}.zip

    - name: Remove Zip of HTML
      uses: JesseTG/rm@v1.0.2
      with:
        path: build/freetube/freetube-${{ steps.versionNumber.outputs.result }}.zip

    - name: Copy files to github.io site
      env:
        token: '${{ secrets.GITHUB_TOKEN }}'
      run: |
        git config --global user.name "GitHub ActionsðŸš€"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git clone https://github.com/MarmadileManteater/MarmadileManteater.github.io.git
        rm MarmadileManteater.github.io/freetube/* -rf
        cp build/freetube/* MarmadileManteater.github.io/freetube/ -rf
        cd MarmadileManteater.github.io
        git add *
        
        git commit -m "Deploying from GitHub ActionsðŸš€"
        git config --global hub.protocol https
        
    - name: Push to a repo
      # You may pin to the exact commit or the version.
      # uses: justjavac/action-gh-push@fec59e7a90d4b38d3a0e504e39f2d5670ee721f1
      uses: justjavac/action-gh-push@v1
      with:
        # Newline-delimited list of path globs for asset files to upload
        files: 'build/freetube'# optional
        # Repository to make releases against, in <owner>/<repo> format
        repository: 'MarmadileManteater/MarmadileManteater.github.io'

